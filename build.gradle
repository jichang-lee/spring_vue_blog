plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'checkstyle'
	id 'pmd'
}

group = 'org.spring'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
	snippetsDir = file('build/generated-snippets')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.security:spring-security-crypto'
	implementation 'org.springframework.session:spring-session-jdbc'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'

	implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

	implementation 'com.querydsl:querydsl-core:5.0.0'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor:3.0.0"
	testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:3.0.0"

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testCompileOnly "org.projectlombok:lombok"
	testAnnotationProcessor "org.projectlombok:lombok"

	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.modelmapper:modelmapper:3.2.0'

	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

asciidoctor.doFirst {
	delete file("src/main/resources/static/docs")
}

bootJar {
	enabled = true

	dependsOn asciidoctor

	copy {
		from asciidoctor.outputDir
		into "src/main/resources/static/docs"
	}
}

jar {
	enabled = false
}

sourceSets {
	main {
		java {
			srcDir 'build/generated/source/apt/main'
		}
	}
}

// Checkstyle 설정
checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
    showViolations = true
}

// PMD 설정
pmd {
    toolVersion = '6.55.0'
    ignoreFailures = true
    ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
    ruleSets = []
}

// CheckStyle 리포트 태스크
checkstyleMain.doLast {
    def checkstyleDir = new File("${project.buildDir}/reports/checkstyle/")
    checkstyleDir.mkdirs()
    def jsonReport = new File(checkstyleDir, "checkstyle-report.json")
    def xmlReport = new File("${project.buildDir}/reports/checkstyle/main.xml")
    
    if (xmlReport.exists()) {
        def checkstyleXml = new XmlParser().parse(xmlReport)
        def files = []
        
        checkstyleXml.file.each { file ->
            def fileName = file.@name
            def violations = []
            
            file.error.each { error ->
                violations << [
                    line: error.@line,
                    severity: error.@severity,
                    message: error.@message,
                    source: error.@source
                ]
            }
            
            if (violations.size() > 0) {
                files << [
                    name: fileName,
                    violations: violations
                ]
            }
        }
        
        def jsonOutput = [
            timestamp: new Date().time,
            files: files
        ]
        
        // JSON 파일에 저장
        jsonReport.text = groovy.json.JsonOutput.toJson(jsonOutput)
    }
}

// PMD 리포트 태스크
pmdMain.doLast {
    def pmdDir = new File("${project.buildDir}/reports/pmd/")
    pmdDir.mkdirs()
    def jsonReport = new File(pmdDir, "pmd-report.json")
    def xmlReport = new File("${project.buildDir}/reports/pmd/main.xml")
    
    if (xmlReport.exists()) {
        def pmdXml = new XmlParser().parse(xmlReport)
        def files = []
        
        pmdXml.file.each { file ->
            def fileName = file.@name
            def violations = []
            
            file.violation.each { violation ->
                violations << [
                    beginline: violation.@beginline,
                    endline: violation.@endline,
                    begincolumn: violation.@begincolumn,
                    endcolumn: violation.@endcolumn,
                    rule: violation.@rule,
                    ruleset: violation.@ruleset,
                    priority: violation.@priority,
                    message: violation.text()
                ]
            }
            
            if (violations.size() > 0) {
                files << [
                    name: fileName,
                    violations: violations
                ]
            }
        }
        
        def jsonOutput = [
            timestamp: new Date().time,
            files: files
        ]
        
        // JSON 파일에 저장
        jsonReport.text = groovy.json.JsonOutput.toJson(jsonOutput)
    }
}

// 코드 검사 통합 태스크
task codeAnalysis {
    dependsOn checkstyleMain, pmdMain
    doLast {
        println "Code analysis completed!"
    }
}
